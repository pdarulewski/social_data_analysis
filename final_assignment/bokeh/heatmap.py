import numpy as npimport pandas as pdfrom bokeh.tile_providers import get_provider, Vendorsfrom bokeh.models import ColumnDataSource, Toolbar, ToolbarBox, Legend, FactorRange, Range1d, LinearColorMapperfrom bokeh.io import output_file, show, reset_outputfrom bokeh.layouts import gridplot, layoutfrom bokeh.plotting import figurefrom bokeh.transform import factor_cmap, factor_markfrom bokeh.palettes import viridisfrom bokeh.models.tools import HoverTool, WheelZoomTool, PanToolfrom bokeh.transform import transformimport seaborn as snsimport mathdataframe = pd.read_csv('../data/Animal Rescue incidents attended by LFB from Jan 2009.csv', encoding='ISO-8859-1')dataframe['AnimalGroupParent'] = dataframe['AnimalGroupParent'].str.replace('cat', 'Cat')# %%costs = dataframe[['Borough', 'AnimalGroupParent', 'IncidentNotionalCost(£)']]costs = costs.groupby(['Borough', 'AnimalGroupParent']).mean()costs = pd.DataFrame(costs)costs = pd.pivot_table(costs, index='Borough', columns='AnimalGroupParent', values='IncidentNotionalCost(£)')costs.index.name = 'Borough'costs.columns.name = 'AnimalGroupParent'costs = costs.stack().rename("value").reset_index()# %%# Had a specific mapper to map color with valuemapper = LinearColorMapper(    # palette='Greys256',    # palette='Inferno256',    # palette='Magma256',    # palette='Plasma256',    # palette='Viridis256',    # palette='Cividis256',    palette='Turbo256',        low=costs.value.min(), high=costs.value.max())p = figure(    plot_width=1400,    plot_height=600,    title="Mean notional cost of rescue — borough vs animal type",    x_range=list(costs.Borough.drop_duplicates()),    y_range=list(costs.AnimalGroupParent.drop_duplicates()),    toolbar_location=None,    tools="")p.xaxis.major_label_orientation = math.pi/4p.rect(    x="Borough",    y="AnimalGroupParent",    width=1,    height=1,    source=ColumnDataSource(costs),    line_color=None,    fill_color=transform('value', mapper),    fill_alpha=0.7)p.add_tools(HoverTool(    tooltips=[        ('Animal group', '@AnimalGroupParent'),        ('Borough', '@Borough'),        ("value", "@value")],    show_arrow=True,mode="mouse", point_policy="follow_mouse"))p.border_fill_color = "#2C3033"p.title.text_color ='white'p.xaxis.major_label_text_color = 'white'p.xaxis.major_tick_line_color = 'white'p.xaxis.minor_tick_line_color = 'white'p.xaxis.axis_line_color = 'white'p.yaxis.major_label_text_color = 'white'p.yaxis.major_tick_line_color = 'white'p.yaxis.minor_tick_line_color = 'white'p.yaxis.axis_line_color = 'white'p.xgrid.grid_line_color = 'white'p.ygrid.grid_line_color = 'white'p.legend.background_fill_alpha = 0.0p.legend.border_line_alpha = 0.0p.legend.label_text_color = "white"p.background_fill_color = "#2C3033"p.background_fill_alpha = 0.8p.xgrid.grid_line_color = "white"p.xgrid.grid_line_alpha = 0.1p.ygrid.grid_line_color = "white"p.ygrid.grid_line_alpha = 0.1p.xaxis.axis_label_text_color = 'white'p.yaxis.axis_label_text_color = 'white'show(p)# %%dataframe.loc[dataframe['AnimalGroupParent'] == 'Unknown - Wild Animal', 'FinalDescription']