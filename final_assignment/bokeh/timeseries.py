import numpy as npimport pandas as pdfrom bokeh.tile_providers import get_provider, Vendorsfrom bokeh.models import ColumnDataSource, Toolbar, ToolbarBox, Legend, FactorRange, Range1d, LinearColorMapperfrom bokeh.io import output_file, show, reset_outputfrom bokeh.layouts import gridplot, layoutfrom bokeh.plotting import figurefrom bokeh.transform import factor_cmap, factor_markfrom bokeh.palettes import viridisfrom bokeh.models.tools import HoverTool, WheelZoomTool, PanToolfrom bokeh.transform import transformimport seaborn as snsimport mathdataframe = pd.read_csv('../data/Animal Rescue incidents attended by LFB from Jan 2009.csv', encoding='ISO-8859-1')# %%dataframe['DateTimeOfCall'] = pd.to_datetime(dataframe['DateTimeOfCall'])dataframe['DayOfWeek'] = dataframe['DateTimeOfCall'].dt.dayofweekdataframe['Day'] = dataframe['DateTimeOfCall'].dt.daydataframe['Month'] = dataframe['DateTimeOfCall'].dt.monthdataframe['Hour'] = dataframe['DateTimeOfCall'].dt.hourdataframe['AnimalGroupParent'] = dataframe['AnimalGroupParent'].replace('cat', 'Cat')animals = pd.DataFrame(dataframe[['AnimalGroupParent', 'DayOfWeek']])animals = animals.groupby(['DayOfWeek', 'AnimalGroupParent']).size().unstack()animals = animals.reindex(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])animal_list = ['Bird', 'Budgie', 'Bull', 'Cat', 'Cow', 'Deer', 'Dog', 'Ferret', 'Fish',       'Fox', 'Goat', 'Hamster', 'Hedgehog', 'Horse', 'Lamb', 'Lizard',       'Pigeon', 'Rabbit', 'Sheep', 'Snake', 'Squirrel', 'Tortoise',       'Unknown - Animal rescue from below ground - Farm animal',       'Unknown - Animal rescue from water - Farm animal',       'Unknown - Domestic Animal Or Pet', 'Unknown - Heavy Livestock Animal',       'Unknown - Wild Animal']animals = dataframe[['AnimalGroupParent', 'Hour', 'IncidentNumber']]animals = animals.groupby(['Hour', 'AnimalGroupParent']).count().reset_index()animals['Normalisation'] = animals.reset_index().apply(    lambda x: x['IncidentNumber'] / animals.groupby('AnimalGroupParent').sum().loc[x['AnimalGroupParent'], 'IncidentNumber'],    axis=1)animals = animals.drop(['IncidentNumber'], axis=1)animals_pivot = pd.pivot_table(animals, index='Hour', columns='AnimalGroupParent')animals_pivot.columns = animals_pivot.columns.droplevel(0)animals_pivot.index = animals_pivot.index.map(str)source = ColumnDataSource(animals_pivot)p = figure(    x_range=FactorRange(factors=animals_pivot.index),    plot_height=1000,    plot_width=1800, toolbar_location=None,    title='Incidents per hour', x_axis_label='Hour of the day', y_axis_label='Relative frequency')# Using seaborn colour palette in the Hex format for colouring each category of the crime in each iteration.cmap = sns.color_palette('husl', len(animals_pivot.columns)).as_hex()bar = {}items = list()for index, animal in enumerate(animal_list):    bar[animal] = p.vbar(        x='Hour', top=animal, source=source,        width=0.6,        color=cmap[index], fill_alpha=0.5,        muted=False, muted_alpha=0.05)    items.append((animal, [bar[animal]]))    p.y_range.start = 0output_file("distro.html")legend = Legend(items=items)p.add_layout(legend, 'right')p.legend.click_policy = 'mute'p.border_fill_color = "#2C3033"p.title.text_color ='white'p.xaxis.major_label_text_color = 'white'p.xaxis.major_tick_line_color = 'white'p.xaxis.minor_tick_line_color = 'white'p.xaxis.axis_line_color = 'white'p.yaxis.major_label_text_color = 'white'p.yaxis.major_tick_line_color = 'white'p.yaxis.minor_tick_line_color = 'white'p.yaxis.axis_line_color = 'white'p.xgrid.grid_line_color = 'white'p.ygrid.grid_line_color = 'white'p.legend.background_fill_alpha = 0.0p.legend.border_line_alpha = 0.0p.legend.label_text_color = "white"p.background_fill_color = "#2C3033"p.xgrid.grid_line_color = "white"p.xgrid.grid_line_alpha = 0.1p.ygrid.grid_line_color = "white"p.ygrid.grid_line_alpha = 0.1p.xaxis.axis_label_text_color = 'white'p.yaxis.axis_label_text_color = 'white'show(p)